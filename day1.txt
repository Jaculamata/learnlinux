|-kiss原则keep it simple，stupid 25
|-尽量做过滤器26 
           |-如果一个程序将另一个程序的输出作为输入数据，接着对输入的数据执行一些操作，并将结果写入标准输出，它就称为一个过滤器。
|-数据流尽量文本化
|-前端和后端分明
|-C编写前用解释性语言搭建原型  
              |-解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。
                                               |-编译：将其他语言翻译成机器语言
|-宽收严发 小就是美 
|-看到该做的就去做-短期看似乎是多做，但从长期看这才是最佳捷径 26
|-软件设计是一门技艺，值得你付出所有的智慧创造力和激情 27
|-一旦某人已经解决了某个问题，就直接拿来利用不要让骄傲或偏见拽住你有去重做一遍
|-善用工具 尽可能将一切都自动化
|-those who cannot remember the past are condemned to repeat it-the life if reason George Santayana
|-集体记忆
       |-集体记忆是社会心理学研究的一个对象。广义而言，集体记忆即是一个具有自己特定文化内聚性和同一性的群体对自己过去的记忆。
|-ken Thompson 
|-Multics
     |-其目的是为了开发出一套安装在大型主机上多人多工的操作系统。
|-Dennis Ritchie
|-计算机不应仅被视为一种逻辑设备而更应视为社群的立足点 31
|-UNICS
     |-uniplexed information and computing service
|-让程序员直接坐在机器旁，飞快捕获稍纵即逝的灵感32
|-外界的压力和纯粹出于对技艺的荣誉感，促使人们在有了更好更多的初步思路后，去重写或抛开已有的大量代码，从来没听说
      什么职业竞争和势力范围保护：好东西太多了，没有人需要把这些创新占为己有
|-汇编器33
     |-汇编器（Assembler）是将汇编语言翻译为机器语言的程序
|-性能的局限不仅成就了经济性，而且鼓励了设计的简约
|-unix 的shell
      |-Unix shell，通常被称作“命令行”，为Unix和类Unix操作系统提供了传统的用户界面。
|-第一个完全意义上的unix 1979年
|-lions34
|-Quick and dirty operating system 36
|-子目录 管道
           |-进程间的通信控制
|-patch应用程序38
        |-将diff生成的修改记录写入基础文件的工具
        |-补丁-代码的渐增变化38
|-GNU manifesto
        |-宣言  完全自由的操作系统
|-Xwindow系统
     |-http://baike.baidu.com/link?url=Ps7s7rzUyjQB3myQYtoPX1OC8vM6TB5TLoQm9zORpWd9dJ0kBOTXbuRxut8ISB3vIpK5QBvLgXvoKnz_3F0BJK
	 |-图形用户接口
|-poxin
|-PS/2 使鼠标成为标准外设
|-linux项目
|-黑客文化43 geek
|-hacks
|-arpanet
      |-阿帕网为美国国防部高级研究计划署开发的世界上第一个运营的封包交换网络，它是全球互联网的始祖。
|-共享文化
|-jargon file 术语文件
|-lisp  44
   |-LISP是一种通用高级计算机程序语言，长期以来垄断人工智能领域的应用。LISP作为因应人工智能而设计的语言，是第一个函数式程序设计语言，有别于C、Fortran等命令式程序设计语言和Java、C#等面向对象语言。
|-协作式开发 源码共享 45
|-夏尔丹式理想主义
|-技术模型铁路俱乐部 TMRC
|-黑客词典
|-Unix文化，ARPANET文化
|-RMS RIChard M stallman
|-Emacs编辑器
     |-Emacs，著名的集成开发环境和文本编辑器。
	 |-与vim并称为最好的程序员文本编译器
|-通用公共许可证 GPL
|-价值冲突
|-自由中的自由
|-X开发组
|-网络改变了软件的开发模式  
|-拒绝成为狂热分子 48
|-Apache web服务器
     |-Apache是世界使用排名第一的Web服务器软件
|-知识产权  49
|-如果有足够多眼睛的关注，所有的bug都无处藏身
|-用自由软件是因为它运行得更好
|-大教堂 和 集市 开发模式
|-开源
|-java
|-自由和开源
|-开源一个重要的意图是希望将黑客社区的方法以一种更亲和市场，更少对抗性的方式
|-介绍给外部世界
|-距开源越近就越繁荣
|-过度依赖任何一种技术或者商业 模式都是错误的
|-保持软件及其设计传统的灵活性才是长存之道
|-破坏性技术：低档的硬件只要数量足够，就能爬上性能曲线而最终获胜
|-吸纳低价而灵活的方案
|-文化随机漂移：先入为主
|-一切皆文件
|-多任务和多用户的区别 多用户权限域
|-工具，管道，过滤器 进程生成 进程间通讯
|-要求把程序间的通讯简化到某一程度而促使功能分离
|-IPC 56
    |-进程间通讯
|-程序员最清楚一切一切
|-三层内部边界防范恶意用户或有缺陷的程序
|-特权程序？58
|-操作系统内部边界的稳定
|-Unix不是以文件名后缀来识别文件类型的
|-客户端：轻量  单用户 随需开关 无抢先式多任务
|-服务器：重量 连续运行，为吞吐量优化，完全抢占式多任务处理
|-目标用户能够容忍的界面复杂级别，如何在可感知复杂度和成本，性能等
|-其他变数之间权衡轻重60
|-Unix是程序员写给程序员的
|-社会性 门槛 时间成本，金钱成本
|-精英编程文化
|-廉价工具和简单接口支持的是轻松编程，玩家文化和开拓探索
|-linux下写代码是在为普通任务的自动化编写脚本或定制环境61
|-高级共享库管理系统
|-基于陷阱指令的代码共享系统
|-Mac界面方针：东西永远待在你摆的地方 68
|-