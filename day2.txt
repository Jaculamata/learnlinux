2015-12-21
Windows NT 它的核心扎根于一小群稳固的中枢观念中
VMS
记录类型 二进制
RPC 远城过程调用
注册表蠕变 随着注册表膨胀，越来越大的存取开销拖慢了所有程序的运行
POSIX 兼容库
RISC技术
MVS
事务监视器
ISPF
LISP
认知心理学
EXEC
VM/CMS
程序员修练之道
shell AWK Perl Python
模块性
   |-封装 :编程先定义接口-->注释-->纯人类语言描述-->编码
   |-紧凑和正交 
       |-紧凑  一个设计能否装进人脑的特性中 对于有经验的用户是否需要操作手册
	   |-正交  任何操作均无副作用，每一个动作只改变一件事
   |-重构 改变内部，但对外部的表现不变
   |-SPOT原则 Don't Repeat Yourself  Single Point of Truth 真理的单点性 无垃圾，无混淆
        |-数据结构模型最小化，不要让数据结构太通用，在真实世界中绝对明确清晰的状态在模型中也要清晰
        |-代码生成器中充分体现
要提高设计的紧凑性，有一个精妙但强大的方法，就是围绕“解决一个定义明确的问题”的强核心算法组织设计，避免臆断和捏造
瘦包装器
diff unix用于报告相关文件不同之处的工具
正则表达式
自然语言的理解问题
试探法和形式法
依附导致痛苦
我们编制软件是为了解决问题，所以我们不可能完全超然于问题之外
自顶向下
    |-抽象到具体 围绕每个行为组织代码
自底向上		
    |-具体到抽象 抽象画硬件
完全的自顶向下和自底向上都不是很好地方法
    |-前者 应用逻辑所需要的域原语和真正能实现的域原语无法匹配
	|-后者可能做许多与应用逻辑无关的工作
胶合层  阻抗匹配
  |-尽可能薄，不应该隐藏各层的裂痕和不平整
  HTML 胶合层
  侧罗（应用逻辑）应该与机制（域原语）清晰的分离
  C语言 薄胶合层
 完美之道，不在无可增加，而在无可删减
 强烈倾向于把程序分解为由胶合层连接的库集合共享库
 插件：拥有一套已知入口，可在启动以后动态从入口处载入来执行特定任务的库
 薄胶合层原则：硬件和程序顶层对象之间的抽象层越少越好
 OO语言鼓励具有厚重胶合和复杂层次
 Hatton最佳范围
 如果不能用一句话来简单描述一个函数与其调用程序之间的约定，这个函数可能就太大了
 数据传输的互用问题
 列集 散集
 图形卡母线